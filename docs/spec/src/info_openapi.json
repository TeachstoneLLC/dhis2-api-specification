{
  "openapi": "3.0.1",
  "info": {
    "contact": {
      "email": "dev@dhis2.org"
    },
    "description": "<!-- auto-inserted: do not edit here -->\n\nThe Web API is a component which makes it possible for external systems to access and manipulate data stored in an instance of DHIS2. More precisely, it provides a programmatic interface to a wide range of exposed data and service methods for applications such as third-party software clients, web portals and internal DHIS2 modules.\n\n## Introduction\n\n<!--DHIS2-SECTION-ID:webapi_introduction-->\n\nThe Web API adheres to many of the principles behind the REST architectural style. To mention some few and important ones:\n\n1.  The fundamental building blocks are referred to as *resources*. A\n    resource can be anything exposed to the Web, from a document to a\n    business process - anything a client might want to interact with.\n    The information aspects of a resource can be retrieved or exchanged\n    through resource *representations*. A representation is a view of a\n    resource's state at any given time. For instance, the *reportTable*\n    resource in DHIS2 represents a tabular report of aggregated data for\n    a certain set of parameters. This resource can be retrieved in a\n    variety of representation formats including HTML, PDF, and MS Excel.\n\n2.  All resources can be uniquely identified by a *URI* (also referred\n    to a/s *URL*). All resources have a default representation. You can\n    indicate that you are interested in a specific representation by\n    supplying an *Accept* HTTP header, a file extension or a *format*\n    query parameter. So in order to retrieve the PDF representation of a\n    report table you can supply a *Accept: application/pdf* header or\n    append *.pdf* or *?format=pdf* to your request URL.\n\n3.  Interactions with the API requires correct use of HTTP *methods* or\n    *verbs*. This implies that for a resource you must issue a *GET*\n    request when you want to retrieve it, *POST* request when you want\n    to create one, *PUT* when you want to update it and *DELETE* when\n    you want to remove it. So if you want to retrieve the default\n    representation of a report table you can send a GET request to e.g.\n    */reportTable/iu8j/hYgF6t*, where the last part is the report table\n    identifier.\n\n4.  Resource representations are *linkable*, meaning that\n    representations advertise other resources which are relevant to the\n    current one by embedding links into itself (please be aware that you\n    need to request *href* in your field filter to have this working.\n    This feature greatly improves the usability and robustness of the\n    API as we will see later. For instance, you can easily navigate to\n    the indicators which are associated with a report table from the\n    *reportTable* resource through the embedded links using your\n    preferred representation format.\n\nWhile all of this might sound complicated, the Web API is actually very simple to use. We will proceed with a few practical examples in a minute.\n\n## Authentication\n\n<!--DHIS2-SECTION-ID:webapi_authentication-->\n\nThe DHIS2 Web API supports two protocols for authentication, Basic Authentication and OAuth 2. You can verify and get information about the currently authenticated user by making a GET request to the following URL:\n\n    /api/26/me\n\nAnd more information about authorities (and if a user have a certain authority) by using the endpoints:\n\n    /api/26/me/authorities\n    /api/26/me/authorities/ALL\n\n### Basic Authentication\n\n<!--DHIS2-SECTION-ID:webapi_basic_authentication-->\n\nThe DHIS2 Web API supports *Basic authentication*. Basic authentication is a technique for clients to send login credentials over HTTP to a web server. Technically speaking, the username is appended with a colon and the password, Base64-encoded, prefixed Basic and supplied as the value of the *Authorization* HTTP header. More formally that is`\nAuthorization: Basic base64encode(username:password)` Most network-aware development frameworks provides support for authentication using Basic, such as Apache HttpClient, Spring RestTemplate and C\\# WebClient. An important note is that this authentication scheme provides no security since the username and password is sent in plain text and can be easily decoded.\nUsing it is recommended only if the server is using SSL/TLS (HTTPS) to encrypt communication between itself and the client. Consider it a hard requirement to provide secure interactions with the Web API.\n\n### Two factor authentication\n\n<!--DHIS2-SECTION-ID:webapi_2fa-->\n\nAs of 2.30 DHIS2 supports two factor authentication. This means that you can enable 2FA in your user settings which means that you will be prompted for a 2FA code at login. You can read more about 2FA here:\n\n    https://www.google.com/landing/2step/\n\n### OAuth2\n\n<!--DHIS2-SECTION-ID:webapi_oauth2-->\n\nDHIS2 supports the OAuth2 authentication protocol. OAuth2 is an open standard for authorization which it allows third-party clients to connect on behalf of a DHIS2 user and get a reusable bearer token for subsequent requests to the Web API. DHIS 2 does not support fine-grained OAuth2 roles but rather provides applications access based on user roles of the DHIS2 user.\n\nEach client for which you want to allow OAuth 2 authentication must be registered in DHIS2. To add a new OAuth2 client go to *Apps \\> Settings\n\\> OAuth2 Clients*, click add new and enter the desired client name and the grant types.\n\n#### Adding a client using the Web API\n\nAn OAuth2 client can be added through the Web API. As an example we can send a payload like this:\n\n    {\n       \"name\" : \"OAuth2 Demo Client\",\n       \"cid\" : \"demo\",\n       \"secret\" : \"1e6db50c-0fee-11e5-98d0-3c15c2c6caf6\",\n       \"grantTypes\" : [\n          \"password\",\n          \"refresh_token\",\n          \"authorization_code\"\n       ],\n       \"redirectUris\" : [\n          \"http://www.example.org\"\n       ]\n    }\n\n    SERVER=\"https://play.dhis2.org/dev\"\n    curl -X POST -H \"Content-Type: application/json\" -d @client.json\n      -u admin:district $SERVER/api/oAuth2Clients\n\nWe will use this client as the basis for our next grant type examples.\n\n#### Grant type password\n\n<!--DHIS2-SECTION-ID:webapi_oauth2_password-->\n\nThe simplest of all grant types is the **password** grant type. This grant type is similar to basic authentication in the sense that it requires the client to collect the users username and password. As an example we can use our demo server:\n\n    SERVER=\"https://play.dhis2.org/dev\"\n    SECRET=\"1e6db50c-0fee-11e5-98d0-3c15c2c6caf6\"\n\n    curl -X POST -H \"Accept: application/json\" -u demo:$SECRET $SERVER/uaa/oauth/token\n    -d grant_type=password -d username=admin -d password=district\n\nThis will give you a response similar to this:\n\n    {\n       \"expires_in\" : 43175,\n       \"scope\" : \"ALL\",\n       \"access_token\" : \"07fc551c-806c-41a4-9a8c-10658bd15435\",\n       \"refresh_token\" : \"a4e4de45-4743-481d-9345-2cfe34732fcc\",\n       \"token_type\" : \"bearer\"\n    }\n\nFor now, we will concentrate on the **access\\_token**, which is what we will use as our authentication (bearer) token. As an example we will get all data elements using our token:\n\n    SERVER=\"https://play.dhis2.org/dev\"\n    curl -H \"Authorization: Bearer 07fc551c-806c-41a4-9a8c-10658bd15435\" $SERVER/api/26/dataElements.json\n\n#### Grant type refresh\\_token\n\n<!--DHIS2-SECTION-ID:webapi_refresh_token-->\n\nIn general the access tokens have limited validity. You can have a look at the **expires\\_in** property of the response in the previous example to understand when a token expires. To get a fresh **access\\_token** you can make another round trip to the server and use **refresh\\_token**\nwhich allows you to get an updated token without needing to ask for the user credentials one more time.\n\n    SERVER=\"https://play.dhis2.org/dev\"\n    SECRET=\"1e6db50c-0fee-11e5-98d0-3c15c2c6caf6\"\n    REFRESH_TOKEN=\"a4e4de45-4743-481d-9345-2cfe34732fcc\"\n\n    curl -X POST -H \"Accept: application/json\" -u demo:$SECRET $SERVER/uaa/oauth/token\n    -d grant_type=refresh_token -d refresh_token=$REFRESH_TOKEN\n\nThe response will be exactly the same as when you get an token to start with.\n\n#### Grant type authorization\\_code\n\n<!--DHIS2-SECTION-ID:webapi_authorization_code-->\n\nAuthorized code grant type is the recommended approach if you don't want to store the user credentials externally. It allows DHIS2 to collect the username/password directly from the user instead of the client collecting them and then authenticating on behalf of the user. Please be aware that this approach uses the **redirect\\_uris** part of the client payload.\n\nStep 1: Using a browser visit this URL (if you have more than one redirect URIs, you might want to add\n\\&redirect\\_uri=http://www.example.org) :\n\n    SERVER=\"https://play.dhis2.org/dev\"\n\n    $SERVER/uaa/oauth/authorize?client_id=demo&response_type=code\n\nStep 2: After the user have successfully logged in and accepted your client access, it will redirect back to your redirect uri like this:\n\n    http://www.example.org/?code=XYZ\n\nStep 3: This step is similar to what we did in the password grant type,\nusing the given code, we will now ask for a access token:\n\n    SERVER=\"https://play.dhis2.org/dev\"\n    SECRET=\"1e6db50c-0fee-11e5-98d0-3c15c2c6caf6\"\n\n    curl -X POST -u demo:$SECRET -H \"Accept: application/json\" $SERVER/uaa/oauth/token\n      -d grant_type=authorization_code -d code=XYZ\n\n## Error and info messages\n\n<!--DHIS2-SECTION-ID:webapi_error_info_messages-->\n\nThe Web API uses a consistent format for all error/warning and informational messages:\n\n    {\n       \"httpStatus\" : \"Forbidden\",\n       \"message\" : \"You don't have the proper permissions to read objects of this type.\",\n       \"httpStatusCode\" : 403,\n       \"status\" : \"ERROR\"\n    }\n\nHere we can see from the message that the user tried to access a resource I did not have access to. It uses the http status code 403, the http status message **forbidden** and a descriptive message.\n\n<table>\n<caption>WebMessage properties</caption>\n<colgroup>\n<col style=\"width: 13%\" />\n<col style=\"width: 86%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>Name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>httpStatus</td>\n<td>HTTP Status message for this response, see RFC 2616 (Section 10) for more information.</td>\n</tr>\n<tr class=\"even\">\n<td>httpStatusCode</td>\n<td>HTTP Status code for this response, see RFC 2616 (Section 10) for more information.</td>\n</tr>\n<tr class=\"odd\">\n<td>status</td>\n<td>DHIS2 status, possible values are <em>OK</em> | <em>WARNING</em> | <em>ERROR</em>, where <strong>OK</strong> is means everything was successful, <strong>ERROR</strong> means that operation did not complete and <strong>WARNING</strong> means operation was partially successful, if there message contains a <strong>response</strong> property, please look there for more information.</td>\n</tr>\n<tr class=\"even\">\n<td>message</td>\n<td>A user friendly message telling whether the operation was a success or not.</td>\n</tr>\n<tr class=\"odd\">\n<td>devMessage</td>\n<td>A more technical, developer-friendly message (not currently in use).</td>\n</tr>\n<tr class=\"even\">\n<td>response</td>\n<td>Extension point for future extension to the WebMessage format. This will be documented when it starts being used.</td>\n</tr>\n</tbody>\n</table>\n\n## Date and period format\n\n<!--DHIS2-SECTION-ID:webapi_date_perid_format-->\n\nThroughout the Web API we refer to dates and periods. The date format is:\n\n    yyyy-MM-dd\n\nFor instance, if you want to express March 20, 2014 you must use\n*2014-03-20*.\n\nThe period format is described in the following table (also available on API endpoint */api/periodTypes*)\n\n<table style=\"width:100%;\">\n<caption>Period format</caption>\n<colgroup>\n<col style=\"width: 24%\" />\n<col style=\"width: 21%\" />\n<col style=\"width: 18%\" />\n<col style=\"width: 35%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>Interval</th>\n<th>Format</th>\n<th>Example</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Day</td>\n<td><em>yyyyMMdd</em></td>\n<td>20040315</td>\n<td>March 15 2004</td>\n</tr>\n<tr class=\"even\">\n<td>Week</td>\n<td><em>yyyy</em>W<em>n</em></td>\n<td>2004W10</td>\n<td>Week 10 2004</td>\n</tr>\n<tr class=\"odd\">\n<td>Week Wednesday</td>\n<td><em>yyyy</em>WedW<em>n</em></td>\n<td>2015WedW5</td>\n<td>Week 5 with start Wednesday</td>\n</tr>\n<tr class=\"even\">\n<td>Week Thursday</td>\n<td><em>yyyy</em>ThuW<em>n</em></td>\n<td>2015ThuW6</td>\n<td>Week 6 with start Thursday</td>\n</tr>\n<tr class=\"odd\">\n<td>Week Saturday</td>\n<td><em>yyyy</em>SatW<em>n</em></td>\n<td>2015SatW7</td>\n<td>Week 7 with start Saturday</td>\n</tr>\n<tr class=\"even\">\n<td>Week Sunday</td>\n<td><em>yyyy</em>SunW<em>n</em></td>\n<td>2015SunW8</td>\n<td>Week 8 with start Sunday</td>\n</tr>\n<tr class=\"odd\">\n<td>Bi-week</td>\n<td><em>yyyy</em>BiW<em>n</em></td>\n<td>2015BiW1</td>\n<td>Week 1-2 20015</td>\n</tr>\n<tr class=\"even\">\n<td>Month</td>\n<td><em>yyyyMM</em></td>\n<td>200403</td>\n<td>March 2004</td>\n</tr>\n<tr class=\"odd\">\n<td>Bi-month</td>\n<td><em>yyyyMM</em>B</td>\n<td>200401B</td>\n<td>January-February 2004</td>\n</tr>\n<tr class=\"even\">\n<td>Quarter</td>\n<td><em>yyyy</em>Q<em>n</em></td>\n<td>2004Q1</td>\n<td>January-March 2004</td>\n</tr>\n<tr class=\"odd\">\n<td>Six-month</td>\n<td><em>yyyy</em>S<em>n</em></td>\n<td>2004S1</td>\n<td>January-June 2004</td>\n</tr>\n<tr class=\"even\">\n<td>Six-month April</td>\n<td><em>yyyy</em>AprilSn</td>\n<td>2004AprilS1</td>\n<td>April-September 2004</td>\n</tr>\n<tr class=\"odd\">\n<td>Year</td>\n<td>yyyy</td>\n<td>2004</td>\n<td>2004</td>\n</tr>\n<tr class=\"even\">\n<td>Financial Year April</td>\n<td>yyyyApril</td>\n<td>2004April</td>\n<td>Apr 2004-Mar 2005</td>\n</tr>\n<tr class=\"odd\">\n<td>Financial Year July</td>\n<td>yyyyJuly</td>\n<td>2004July</td>\n<td>July 2004-June 2005</td>\n</tr>\n<tr class=\"even\">\n<td>Financial Year Oct</td>\n<td>yyyyOct</td>\n<td>2004Oct</td>\n<td>Oct 2004-Sep 2005</td>\n</tr>\n</tbody>\n</table>\n\n\n### Relative Periods\n\n<!--DHIS2-SECTION-ID:webapi_date_relative_period_values-->\n\n\nIn some parts of the API, like for the analytics resource, you can utilize relative periods in addition to fixed periods (defined above).\nThe relative periods are relative to the current date, and allows e.g.\nfor creating dynamic reports. The available relative period values are:\n\n    THIS_WEEK, LAST_WEEK, LAST_4_WEEKS, LAST_12_WEEKS, LAST_52_WEEKS,\n    THIS_MONTH, LAST_MONTH, THIS_BIMONTH, LAST_BIMONTH, THIS_QUARTER, LAST_QUARTER,\n    THIS_SIX_MONTH, LAST_SIX_MONTH, MONTHS_THIS_YEAR, QUARTERS_THIS_YEAR,\n    THIS_YEAR, MONTHS_LAST_YEAR, QUARTERS_LAST_YEAR, LAST_YEAR, LAST_5_YEARS, LAST_12_MONTHS,\n    LAST_3_MONTHS, LAST_6_BIMONTHS, LAST_4_QUARTERS, LAST_2_SIXMONTHS, THIS_FINANCIAL_YEAR,\n    LAST_FINANCIAL_YEAR, LAST_5_FINANCIAL_YEARS\n\n## Identifier schemes\n\n<!--DHIS2-SECTION-ID:webapi_identifier_schemes-->\n\nThis section provides an explanation of the identifier scheme concept.\nIdentifier schemes are used to map metadata objects to other metadata during import, and to render metadata as part of exports. Please note that not all schemes works for all web-api calls, and not not all schemes can be used for both input and output (this is outlined in the sections explaining the various Web APIs).\n\nThe full set of identifier scheme object types available are listed below, using the name of the property to use in queries:\n\n  - idScheme\n\n  - dataElementIdScheme\n\n  - categoryOptionComboIdScheme\n\n  - orgUnitIdScheme\n\n  - programIdScheme\n\n  - programStageIdScheme\n\n  - trackedEntityIdScheme\n\n  - trackedEntityAttributeIdScheme\n\nThe general idScheme applies to all types of objects. It can be overridden by specific object types.\n\nThe default scheme for all parameters is UID (stable DHIS 2\nidentifiers). The supported identifier schemes are described in the table below.\n\n<table>\n<caption>Scheme Values</caption>\n<colgroup>\n<col style=\"width: 14%\" />\n<col style=\"width: 85%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>Scheme</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>ID, UID</td>\n<td>Match on DHIS2 stable Identifier, this is the default id scheme.</td>\n</tr>\n<tr class=\"even\">\n<td>CODE</td>\n<td>Match on DHIS2 Code, mainly used to exchange data with an external system.</td>\n</tr>\n<tr class=\"odd\">\n<td>NAME</td>\n<td>Match on DHIS2 Name, please not that this uses what is available as <em>object.name</em>, and not the translated name. Also not that names are not always unique, and in that case they can not be used.</td>\n</tr>\n<tr class=\"even\">\n<td>ATTRIBUTE:ID</td>\n<td>Match on metadata attribute, this attribute needs to be assigned to the type you are matching on, and also that the unique property is set to <em>true</em>. The main usage of this is also to exchange data with external systems, it has some advantages over <em>CODE</em> since multiple attributes can be added, so it can be used to synchronize with more than one system.</td>\n</tr>\n</tbody>\n</table>\n\nNote that identifier schemes is not an independent feature but needs to be used in combination with resources such as data value import and meta data import.\n\nAs an example, to specify CODE as the general id scheme and override with UID for organisation unit id scheme you can use these query parameters:\n\n    ?idScheme=CODE&orgUnitIdScheme=UID\n\nAs another example, to specify an attribute for the organisation unit id scheme, code for the data element id scheme and use the default UID id scheme for all other objects you can use these parameters:\n\n    ?orgUnitIdScheme=ATTRIBUTE:j38fk2dKFsG&dataElementIdScheme=CODE\n\n## Browsing the Web API\n\n<!--DHIS2-SECTION-ID:webapi_browsing_the_web_api-->\n\nThe entry point for browsing the Web API is */api/*. This resource provide links to all available resources. Four resource representation formats are consistently available for all resources: HTML, XML, JSON and JSONP. Some resources will have other formats available, like MS Excel, PDF, CSV and PNG. To explore the API from a web browser, navigate to the */api/* entry point and follow the links to your desired resource, for instance */api/dataElements*. For all resources which return a list of elements certain query parameters can be used to modify the response:\n\n<table style=\"width:100%;\">\n<caption>Query parameters</caption>\n<colgroup>\n<col style=\"width: 11%\" />\n<col style=\"width: 20%\" />\n<col style=\"width: 12%\" />\n<col style=\"width: 54%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>Param</th>\n<th>Option values</th>\n<th>Default option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>paging</td>\n<td>true | false</td>\n<td>true</td>\n<td>Indicates whether to return lists of elements in pages.</td>\n</tr>\n<tr class=\"even\">\n<td>page</td>\n<td>number</td>\n<td>1</td>\n<td>Defines which page number to return.</td>\n</tr>\n<tr class=\"odd\">\n<td>pageSize</td>\n<td>number</td>\n<td>50</td>\n<td>Defines the number of elements to return for each page.</td>\n</tr>\n<tr class=\"even\">\n<td>order</td>\n<td>property:asc/iasc/desc/idesc</td>\n<td></td>\n<td>Order the output using a specified order, only properties that are both persisted and simple (no collections, idObjects etc) are supported. iasc and idesc are case insensitive sorting.</td>\n</tr>\n</tbody>\n</table>\n\nAn example of how these parameters can be used to get a full list of data element groups in XML response format is:\n\n    /api/26/dataElementGroups.xml?links=false&paging=false\n\nYou can query for elements on the name property instead of returning full list of elements using the *query* query variable. In this example we query for all data elements with the word \"anaemia\" in the name:\n\n    /api/26/dataElements?query=anaemia\n\nYou can get specific pages and page sizes of objects like this:\n\n    /api/26/dataElements.json?page=2&pageSize=20\n\nYou can completely disable paging like this:\n\n    /api/26/indicatorGroups.json?paging=false\n\nTo order the result based on a specific property:\n\n    /api/26/indicators.json?order=shortName:desc\n\nYou can find an object based on its ID across all object types through the *identifiableObjects* resource:\n\n    /api/26/identifiableObjects/<id>\n\n### Translation\n\n<!--DHIS2-SECTION-ID:webapi_translation-->\n\nDHIS2 supports translations of database content, such as data elements,\nindicators and programs. All metadata objects in the Web API have properties meant to be used for display / UI purposes, which includes\n*displayName*, *displayShortName* and *displayDescription*.\n\n<table>\n<caption>Translate options</caption>\n<colgroup>\n<col style=\"width: 20%\" />\n<col style=\"width: 16%\" />\n<col style=\"width: 62%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>Parameter</th>\n<th>Values</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>translate</td>\n<td>true | false</td>\n<td>Translate display* properties in metadata output (displayName, displayShortName, displayDescription, and displayFormName for data elements). Default value is true.</td>\n</tr>\n<tr class=\"even\">\n<td>locale</td>\n<td>Locale to use</td>\n<td>Translate metadata output using a specified locale (requires translate=true).</td>\n</tr>\n</tbody>\n</table>\n\n### Translation API\n\n<!--DHIS2-SECTION-ID:webapi_translation_api-->\n\nThe translations for an object is rendered as part of the object itself in the *translations* array. Note that the *translations* array in the JSON/XML payloads are normally pre-filtered for you, which means they can not directly be used to import/export translations (as that would normally overwrite locales other than current users).\n\n*Example of data element with translation array filtered on user locale:*\n\n    {\n      \"id\": \"FTRrcoaog83\",\n      \"displayName\": \"Accute French\",\n      \"translations\": [\n        {\n          \"property\": \"SHORT_NAME\",\n          \"locale\": \"fr\",\n          \"value\": \"Accute French\"\n        },\n        {\n          \"property\": \"NAME\",\n          \"locale\": \"fr\",\n          \"value\": \"Accute French\"\n        }\n      ]\n    }\n\n*Example of data element with translations turned off:*\n\n    {\n      \"id\": \"FTRrcoaog83\",\n      \"displayName\": \"Accute Flaccid Paralysis (Deaths < 5 yrs)\",\n      \"translations\": [\n        {\n          \"property\": \"FORM_NAME\",\n          \"locale\": \"en_FK\",\n          \"value\": \"aa\"\n        },\n        {\n          \"property\": \"SHORT_NAME\",\n          \"locale\": \"en_GB\",\n          \"value\": \"Accute Flaccid Paral\"\n        },\n        {\n          \"property\": \"SHORT_NAME\",\n          \"locale\": \"fr\",\n          \"value\": \"Accute French\"\n        },\n        {\n          \"property\": \"NAME\",\n          \"locale\": \"fr\",\n          \"value\": \"Accute French\"\n        },\n        {\n          \"property\": \"NAME\",\n          \"locale\": \"en_FK\",\n          \"value\": \"aa\"\n        },\n        {\n          \"property\": \"DESCRIPTION\",\n          \"locale\": \"en_FK\",\n          \"value\": \"aa\"\n        }\n      ]\n    }\n\nNote that even if you get the unfiltered result, and are using the appropriate type endpoint i..e */api/26/dataElements* we do not allow updates, as it would be too easy to make mistakes and overwrite the other available locales.\n\nTo read and update translations you can use the special translations endpoint for each object resource. These can be accessed by **GET** or\n**PUT** on the appropriate\n*/api/26/\\<object-type\\>/\\<object-id\\>/translations* endpoint. As an example, for a data element with identifier *FTRrcoaog83* you could use\n*/api/26/dataElements/FTRrcoaog83/translations* to get and update translations. The fields available are *property* with options **NAME**,\n**SHORT\\_NAME**, **DESCRIPTION**, the *locale* which supports any valid locale ID and the the *value* itself.\n\n*Example of NAME property for French locale:*\n\n    {\n      \"property\": \"NAME\",\n      \"locale\": \"fr\",\n      \"value\": \"Paralysie Flasque Aigu\u00eb (D\u00e9c\u00e8s <5 ans)\"\n    }\n\nThis payload would then be added to a translation array, and sent back to the appropriate endpoint:\n\n    {\n      \"translations\": [\n        {\n          \"property\": \"NAME\",\n          \"locale\": \"fr\",\n          \"value\": \"Paralysie Flasque Aigu\u00eb (D\u00e9c\u00e8s <5 ans)\"\n        }\n      ]\n    }\n\nFor a an data element with ID *FTRrcoaog83* you can **PUT** this to\n*/api/26/dataElements/FTRrcoaog83/translations*. Make sure to send all translations for the specific object and not just for a single locale\n(if not you will potentially overwrite existing locales for other locales).\n\n### Web API versions\n\n<!--DHIS2-SECTION-ID:webapi_api_versions-->\n\nThe Web API is versioned starting from DHIS 2.25. The API versioning follows the DHIS 2 major version numbering. As an example, the API version for DHIS 2.25 is *25*.\n\nYou can access a specific API version by including the version number after the */api* component, as an example like this:\n\n    /api/26/dataElements\n\nIf you omit the version part of the URL, the system will use the current API version. As an example, for DHIS 2.25, when omitting the API part,\nthe system will use API version 25. When developing API clients it is recommended to use explicit API versions (rather than omitting the API version), as this will protect the client from unforeseen API changes.\n\nThe last three API versions will be supported. As an example, DHIS version 2.27 will support API version 27, 26 and 25.\n\nNote that the metadata model is not versioned, and that you might experience changes e.g. in associations between objects. These changes will be documented in the DHIS2 major version release notes.\n\n## Metadata object filter\n\n<!--DHIS2-SECTION-ID:webapi_metadata_object_filter-->\n\nTo filter the metadata there are several filter operations that can be applied to the returned list of metadata. The format of the filter itself is straight-forward and follows the pattern\n*property:operator:value*, where *property* is the property on the metadata you want to filter on, *operator* is the comparison operator you want to perform and *value* is the value to check against (not all operators require value). Please see the *schema* section to discover which properties are available. Recursive filtering, ie. filtering on associated objects or collection of objects, are supported as well.\n\n<table>\n<caption>Available Operators</caption>\n<thead>\n<tr class=\"header\">\n<th>Operator</th>\n<th>Types</th>\n<th>Value required</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>eq</td>\n<td>string | boolean | integer | float | enum | collection (checks for size) | date</td>\n<td>true</td>\n<td>Equality</td>\n</tr>\n<tr class=\"even\">\n<td>!eq</td>\n<td>string | boolean | integer | float | enum | collection (checks for size) | date</td>\n<td>true</td>\n<td>Inequality</td>\n</tr>\n<tr class=\"odd\">\n<td>ne</td>\n<td>string | boolean | integer | float | enum | collection (checks for size) | date</td>\n<td>true</td>\n<td>Inequality</td>\n</tr>\n<tr class=\"even\">\n<td>like</td>\n<td>string</td>\n<td>true</td>\n<td>Case sensitive string, match anywhere</td>\n</tr>\n<tr class=\"odd\">\n<td>!like</td>\n<td>string</td>\n<td>true</td>\n<td>Case sensitive string, not match anywhere</td>\n</tr>\n<tr class=\"even\">\n<td>\\$like</td>\n<td>string</td>\n<td>true</td>\n<td>Case sensitive string, match start</td>\n</tr>\n<tr class=\"odd\">\n<td>!\\$like</td>\n<td>string</td>\n<td>true</td>\n<td>Case sensitive string, not match start</td>\n</tr>\n<tr class=\"even\">\n<td>like\\$</td>\n<td>string</td>\n<td>true</td>\n<td>Case sensitive string, match end</td>\n</tr>\n<tr class=\"odd\">\n<td>!like\\$</td>\n<td>string</td>\n<td>true</td>\n<td>Case sensitive string, not match end</td>\n</tr>\n<tr class=\"even\">\n<td>ilike</td>\n<td>string</td>\n<td>true</td>\n<td>Case insensitive string, match anywhere</td>\n</tr>\n<tr class=\"odd\">\n<td>!ilike</td>\n<td>string</td>\n<td>true</td>\n<td>Case insensitive string, not match anywhere</td>\n</tr>\n<tr class=\"even\">\n<td>\\$ilike</td>\n<td>string</td>\n<td>true</td>\n<td>Case insensitive string, match start</td>\n</tr>\n<tr class=\"odd\">\n<td>!\\$ilike</td>\n<td>string</td>\n<td>true</td>\n<td>Case insensitive string, not match start</td>\n</tr>\n<tr class=\"even\">\n<td>ilike\\$</td>\n<td>string</td>\n<td>true</td>\n<td>Case insensitive string, match end</td>\n</tr>\n<tr class=\"odd\">\n<td>!ilike\\$</td>\n<td>string</td>\n<td>true</td>\n<td>Case insensitive string, not match end</td>\n</tr>\n<tr class=\"even\">\n<td>gt</td>\n<td>string | boolean | integer | float | collection (checks for size) | date</td>\n<td>true</td>\n<td>Greater than</td>\n</tr>\n<tr class=\"odd\">\n<td>ge</td>\n<td>string | boolean | integer | float | collection (checks for size) | date</td>\n<td>true</td>\n<td>Greater than or equal</td>\n</tr>\n<tr class=\"even\">\n<td>lt</td>\n<td>string | boolean | integer | float | collection (checks for size) | date</td>\n<td>true</td>\n<td>Less than</td>\n</tr>\n<tr class=\"odd\">\n<td>le</td>\n<td>string | boolean | integer | float | collection (checks for size) | date</td>\n<td>true</td>\n<td>Less than or equal</td>\n</tr>\n<tr class=\"even\">\n<td>null</td>\n<td>all</td>\n<td>false</td>\n<td>Property is null</td>\n</tr>\n<tr class=\"odd\">\n<td>!null</td>\n<td>all</td>\n<td>false</td>\n<td>Property is not null</td>\n</tr>\n<tr class=\"even\">\n<td>empty</td>\n<td>collection</td>\n<td>false</td>\n<td>Collection is empty</td>\n</tr>\n<tr class=\"odd\">\n<td>token</td>\n<td>string</td>\n<td>true</td>\n<td>Match on multiple tokens in search property</td>\n</tr>\n<tr class=\"even\">\n<td>!token</td>\n<td>string</td>\n<td>true</td>\n<td>Not match on multiple tokens in search property</td>\n</tr>\n<tr class=\"odd\">\n<td>in</td>\n<td>string | boolean | integer | float | date</td>\n<td>true</td>\n<td>Find objects matching 1 or more values</td>\n</tr>\n<tr class=\"even\">\n<td>!in</td>\n<td>string | boolean | integer | float | date</td>\n<td>true</td>\n<td>Find objects not matching 1 or more values</td>\n</tr>\n</tbody>\n</table>\n\nOperators will be applied as logical **and** query, if you need a **or**\nquery, you can have a look at our *in* filter (also have a look at the section below). The filtering mechanism allows for recursion. See below for some examples.\n\nGet data elements with id property ID1 or ID2:\n\n    /api/26/dataElements?filter=id:eq:ID1&filter=id:eq:ID2\n\nGet all data elements which has the dataSet with id ID1:\n\n    /api/26/dataElements?filter=dataSetElements.dataSet.id:eq:ID1\n\nGet all data elements with aggregation operator \"sum\" and value type\n\"int\":\n\n    /api/26/dataElements.json?filter=aggregationOperator:eq:sum&filter=type:eq:int\n\nYou can do filtering within collections, e.g. to get data elements which are members of the \"ANC\" data element group you can use the following query using the id property of the associated data element groups:\n\n    /api/26/dataElements.json?filter=dataElementGroups.id:eq:qfxEYY9xAl6\n\nSince all operators are **and** by default, you can't find a data element matching more than one id, for that purpose you can use the *in*\noperator.\n\n    /api/26/dataElements.json?filter=id:in:[fbfJHSPpUQD,cYeuwXTCPkU]\n\n### Logical operators\n\n<!--DHIS2-SECTION-ID:webapi_metadata_logical_operator-->\n\nAs mentioned in the section before, the default logical operator applied to the filters are **AND** which means that all object filters must be matched. There are however cases where you want to match on one of several filters (maybe id and code field) and in those cases it is possible to switch the root logical operator from **AND** to **OR**\nusing the *rootJunction* parameter.\n\nExample: Normal filtering where both id and code must match to have a result returned\n\n    /api/dataElements.json?filter=id:in:[id1,id2]&filter=code:eq:code1\n\nExample: Filtering where the logical operator has been switched to OR and now only one of the filters must match to have a result\n    returned\n\n    /api/dataElements.json?filter=id:in:[id1,id2]&filter=code:eq:code1&rootJunction=OR\n\n### Identifiable token filter\n\nIn addition to the specific property based filtering mentioned above,\nwe also have **token** based **AND** filtering across a set of properties: id, code and name (also shortName if available). These properties are commonly referred as **identifiable**. The idea is to filter metadata whose id, name, code or short name containing something.\n\nExample: Filter all data elements containing *2nd* in any of the following: id,name,code, shortName\n\n    api/dataElements.json?filter=identifiable:token:2nd\n\nIt is also possible to specify multiple filtering values.\n\nExample: Get all data elements where *ANC visit* is found in any of the **identifiable** properties. The system returns all data elements where both tokens (ANC and visit) are found anywhere in identifiable properties.\n\n    api/dataElements.json?filter=identifiable:token:ANC visit\n\nIt is also possible to combine identifiable filter with property based filter and expect the *rootJunction* to be applied.\n\n    api/dataElements.json?filter=identifiable:token:ANC visit&filter=displayName:ilike:tt1\n\n    api/dataElements.json?filter=identifiable:token:ANC visit&filter=displayName:ilike:tt1&rootJunction=OR\n\n## Metadata field filter\n\n<!--DHIS2-SECTION-ID:webapi_metadata_field_filter-->\n\nIn certain situations the default views of the metadata can be too verbose. A client might only need a few fields from each object and want to remove unnecessary fields from the response. To discover which fields are available for each object please see the *schema* section.\n\nThe format for include/exclude is very simple and allows for infinite recursion. To filter at the \"root\" level you can just use the name of the field, i.e. *?fields=id,name* which would only display the *id* and\n*name* for every object. For objects that are either collections or complex objects with properties on their own you can use the format\n*?fields=id,name,dataSets\\[id,name\\]* which would return *id*, *name* of the root, and the *id* and *name* of every data set on that object.\nNegation can be done with the exclamation operator, and we have a set of presets of field select (see below). Both XML and JSON are supported.\n\n**Example**: Get *id* and *name* on the indicators resource:\n\n    /api/26/indicators?fields=id,name\n\n**Example**: Get *id* and *name* from dataElements, and *id* and *name*\nfrom the dataSets on dataElements:\n\n    /api/26/dataElements?fields=id,name,dataSets[id,name]\n\nTo exclude a field from the output you can use the exclamation (\\!)\noperator. This is allowed anywhere in the query and will simply not include that property (as it might have been inserted in some of the presets).\n\nA few presets (selected fields groups) are available and can be applied using the ':' operator.\n\n<table>\n<caption>Property operators</caption>\n<colgroup>\n<col style=\"width: 25%\" />\n<col style=\"width: 74%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>Operator</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>&lt;field-name&gt;</td>\n<td>Include property with name, if it exists.</td>\n</tr>\n<tr class=\"even\">\n<td>&lt;object&gt;[&lt;field-name&gt;, ...]</td>\n<td>Includes a field within either a collection (will be applied to every object in that collection), or just on a single object.</td>\n</tr>\n<tr class=\"odd\">\n<td>!&lt;field-name&gt;, &lt;object&gt;[!&lt;field-name&gt;</td>\n<td>Do not include this field name, also works inside objects/collections. Useful when you use a preset to include fields.</td>\n</tr>\n<tr class=\"even\">\n<td>*, &lt;object&gt;[*]</td>\n<td>Include all fields on a certain object, if applied to a collection, it will include all fields on all objects on that collection.</td>\n</tr>\n<tr class=\"odd\">\n<td>:&lt;preset&gt;</td>\n<td>Alias to select multiple fields. Three presets are currently available, see table below for descriptions.</td>\n</tr>\n</tbody>\n</table>\n\n<table>\n<caption>Field presets</caption>\n<colgroup>\n<col style=\"width: 25%\" />\n<col style=\"width: 74%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>Preset</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>all</td>\n<td>All fields of the object</td>\n</tr>\n<tr class=\"even\">\n<td>*</td>\n<td>Alias for all</td>\n</tr>\n<tr class=\"odd\">\n<td>identifiable</td>\n<td>Includes id, name, code, created and lastUpdated fields</td>\n</tr>\n<tr class=\"even\">\n<td>nameable</td>\n<td>Includes id, name, shortName, code, description, created and lastUpdated fields</td>\n</tr>\n<tr class=\"odd\">\n<td>persisted</td>\n<td>Returns all persisted property on a object, does not take into consideration if the object is the owner of the relation.</td>\n</tr>\n<tr class=\"even\">\n<td>owner</td>\n<td>Returns all persisted property on a object where the object is the owner of all properties, this payload can be used to update through the web-api.</td>\n</tr>\n</tbody>\n</table>\n\n**Example**: Include all fields from dataSets except organisationUnits:\n\n    /api/26/dataSets?fields=:all,!organisationUnits\n\n**Example**: Include only id, name and the collection of organisation units from a data set, but exclude the id from organisation\n    units:\n\n    /api/26/dataSets/BfMAe6Itzgt?fields=id,name,organisationUnits[:all,!id]\n\n**Example**: Include nameable properties from all indicators:\n\n    /api/26/indicators.json?fields=:nameable\n\n### Field transformers\n\n<!--DHIS2-SECTION-ID:webapi_field_transformers-->\n\nIn DHIS2.17 we introduced field transformers, the idea is to allow further customization of the properties on the server side.\n\n    /api/26/dataElements/ID?fields=id~rename(i),name~rename(n)\n\nThis will rename the *id* property to *i* and *name* property to *n*.\n\nMultiple transformers can be used by repeating the transformer\n    syntax:\n\n    /api/26/dataElementGroups.json?fields=id,displayName,dataElements~isNotEmpty~rename(haveDataElements)\n\n<table>\n<caption>Available Transformers</caption>\n<colgroup>\n<col style=\"width: 33%\" />\n<col style=\"width: 21%\" />\n<col style=\"width: 44%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>Name</th>\n<th>Arguments</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>size</td>\n<td></td>\n<td>Gives sizes of strings (length) and collections</td>\n</tr>\n<tr class=\"even\">\n<td>isEmpty</td>\n<td></td>\n<td>Is string or collection empty</td>\n</tr>\n<tr class=\"odd\">\n<td>isNotEmpty</td>\n<td></td>\n<td>Is string or collection not empty</td>\n</tr>\n<tr class=\"even\">\n<td>rename</td>\n<td>Arg1: name</td>\n<td>Renames the property name</td>\n</tr>\n<tr class=\"odd\">\n<td>paging</td>\n<td>Arg1: page,Arg2: pageSize</td>\n<td>Pages a collection, default pageSize is 50.</td>\n</tr>\n</tbody>\n</table>\n\n#### Examples\n\n<!--DHIS2-SECTION-ID:webapi_field_transformers_examples-->\n\nExamples of transformer\n    usage.\n\n    /api/26/dataElements?fields=dataSets~size\n\n    /api/26/dataElements?fields=dataSets~isEmpty\n\n    /api/26/dataElements?fields=dataSets~isNotEmpty\n\n    /api/26/dataElements/ID?fields=id~rename(i),name~rename(n)\n\n    /api/26/dataElementGroups?fields=id,displayName,dataElements~paging(1;20)\n\n## Metadata create, read, update, delete, validate\n\n<!--DHIS2-SECTION-ID:webapi_metadata_crud-->\n\nWhile some of the web-api endpoints already contains support for CRUD\n(create, read, update, delete), from version 2.15 this is now supported on all endpoints. It should work as you expect, and the subsections will give more detailed information about create, update, and delete (read is already covered elsewhere, and have been supported for a long time).\n\n### Create / update parameters\n\n<!--DHIS2-SECTION-ID:webapi_metadata_create_update-->\n\nThe following query parameters are available for customizing your request.\n\n<table>\n<caption>Available Query Filters</caption>\n<thead>\n<tr class=\"header\">\n<th>Param</th>\n<th>Type</th>\n<th>Required</th>\n<th>Options (default first)</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>preheatCache</td>\n<td>boolean</td>\n<td>false</td>\n<td>true | false</td>\n<td>Turn cache-map preheating on/off. This is on by default, turning this off will make initial load time for importer much shorter (but will make the import itself slower). This is mostly used for cases where you have a small XML/JSON file you want to import, and don't want to wait for cache-map preheating.</td>\n</tr>\n<tr class=\"even\">\n<td>strategy</td>\n<td>enum</td>\n<td>false</td>\n<td>CREATE_AND_UPDATE | CREATE | UPDATE | DELETE</td>\n<td>Import strategy to use, see below for more information.</td>\n</tr>\n<tr class=\"odd\">\n<td>mergeMode</td>\n<td>enum</td>\n<td>false</td>\n<td>REPLACE, MERGE</td>\n<td>Strategy for merging of objects when doing updates. REPLACE will just overwrite the property with the new value provided, MERGE will only set the property if its not null (only if the property was provided).</td>\n</tr>\n</tbody>\n</table>\n\n",
    "termsOfService": "",
    "title": "DHIS2 API",
    "version": "2.33",
    "x-logo": {
      "url": "dhis2_logo.png"
    }
  },
  "paths": {}
}